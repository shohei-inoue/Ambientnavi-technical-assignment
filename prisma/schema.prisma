// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ユーザー
enum Gender {
  MALE
  FEMALE
  OTHER
}

model User {
  id         Int      @id @default(autoincrement())
  uuid      String    @unique
  email      String   @unique
  password   String
  name       String
  gender     Gender
  birthday  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userSessions UserSession[]
}

model UserSession {
  id             Int           @id @default(autoincrement())
  userId         Int
  tableSessionId Int
  user           User          @relation(fields: [userId], references: [id])
  tableSession   TableSession  @relation(fields: [tableSessionId], references: [id])
  createdAt      DateTime      @default(now())

  @@unique([userId, tableSessionId])
}


// テーブル
model Table {
  id           Int       @id @default(autoincrement())
  number       Int
  guestCount   Int
  checkedInAt  DateTime
  checkedOutAt DateTime?
  isPaid       Boolean   @default(false)
  sessions     TableSession[]
  orders       Order[]
}

model TableSession {
  id        Int      @id @default(autoincrement())
  tableId   Int
  table     Table    @relation(fields: [tableId], references: [id])
  userId    Int?
  sessionId String   @unique @default(uuid())
  createdAt DateTime @default(now())
  cart      Cart?
  userSessions UserSession[]    
}

model Order {
  id         Int         @id @default(autoincrement())
  tableId    Int
  table      Table       @relation(fields: [tableId], references: [id])
  status     OrderStatus @default(PENDING)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  orderItems OrderItem[]
}


model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])
  menuId    Int
  menu      Menu     @relation(fields: [menuId], references: [id])
  quantity  Int
  note      String? 
}

enum OrderStatus {
  PENDING   // 注文受付中
  CONFIRMED // 厨房確認済み
  SERVED    // 配膳済み
  PAID      // 支払い済み
}

// カート
model Cart {
  id            Int          @id @default(autoincrement())
  tableSession  TableSession @relation(fields: [tableSessionId], references: [id])
  tableSessionId Int         @unique
  items         CartItem[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

// カート内の商品
model CartItem {
  id        Int   @id @default(autoincrement())
  cart      Cart  @relation(fields: [cartId], references: [id])
  cartId    Int
  menu      Menu  @relation(fields: [menuId], references: [id])
  menuId    Int
  quantity  Int
  note      String?
}

// カテゴリー
model Category {
  id            Int    @id @default(autoincrement())
  name          String @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  subCategories SubCategory[]
}

// サブカテゴリー
model SubCategory {
  id         Int     @id @default(autoincrement())
  name       String
  categoryId Int
  category   Category   @relation(fields: [categoryId], references: [id])
  menus      Menu[]
}

// タグ
model Tag {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  color     String? 
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  menus     MenuTag[]
}

// メニュー
model Menu {
  id            Int         @id @default(autoincrement())
  name          String      @unique
  description   String?
  price         Int
  imageUrl      String?
  isAvailable   Boolean     @default(true)
  taxIncluded   Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  subCategoryId Int
  subCategory   SubCategory @relation(fields: [subCategoryId], references: [id])
  tags          MenuTag[]
  orderItems    OrderItem[]
  cartItems     CartItem[] 
}

// メニュー - タグ
model MenuTag {
  menuId  Int
  tagId   Int
  menu    Menu @relation(fields: [menuId], references: [id])
  tag     Tag  @relation(fields: [tagId], references: [id])

  @@id([menuId, tagId])
}
